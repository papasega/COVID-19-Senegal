import streamlit as st

# Base packages
import pandas as pd
import numpy as np
import datetime
import altair as alt
import matplotlib.pyplot as plt

# Find coordinates
from geopy.geocoders import Nominatim
geolocator = Nominatim(user_agent="myapp2")
import time

# Plot static maps
import cartopy.crs as ccrs
import cartopy.feature as cfeature

# Plot interactive maps
import geopandas as gpd
from shapely import wkt
from bokeh.io import output_notebook, show, output_file
from bokeh.plotting import figure
from bokeh.models import GeoJSONDataSource, ColumnDataSource
import json
from bokeh.models import HoverTool

import math
from scipy.optimize import curve_fit
import plotly.express as px

st.header("Xibaaru Jangor√´y COVID-19 au S√©n√©gal üá∏üá≥")

st.sidebar.markdown("*Derni√®re mise √† jour: 23/03/2020*")
st.sidebar.markdown("---")
st.sidebar.header("Ressources utiles")

st.sidebar.markdown("Num√©ro d'urgence 1: **78 172 10 81**")
st.sidebar.markdown("Num√©ro d'urgence 2: **76 765 97 31**")
st.sidebar.markdown("Num√©ro d'urgence 3: **70 717 14 92**")
st.sidebar.markdown("Num√©ro Vert du Minist√®re: **800 00 50 50**")
st.sidebar.markdown("Samu: **1515**")
st.sidebar.markdown("Service USSD: **#2121#**")
st.sidebar.markdown("[Testez vos symptomes sur Prevcovid19](http://www.prevcovid19.com/#/teste)")
st.sidebar.markdown("[Tweets du Minist√®re de la Sant√©](https://twitter.com/MinisteredelaS1)")
st.sidebar.markdown("[Base de donn√©es et code de l'application](https://github.com/maelfabien/COVID-19-Senegal)")
st.sidebar.markdown("---")

st.sidebar.header("Contacter le Minist√®re")

st.sidebar.markdown("Minist√®re de la sant√© et de l'Action Sociale / Fann R√©sidence")
st.sidebar.markdown("Rue Aim√© C√©saire, Dakar, S√©n√©gal")
st.sidebar.markdown("+221 800 00 50 50 - contact@sante.gouv.sn")

st.sidebar.markdown("---")
st.sidebar.markdown("R√©alis√© par [Papa S√©ga WADE](https://github.com/papasega/COVID-19-Senegal/) en collaboration avec [Ma√´l Fabien](https://maelfabien.github.io/) et [Dakar Institute of Technology](https://dit.sn/)")

# I. Dataframe

df = pd.read_csv("COVID_Dakar.csv", sep=";")
df['Date'] = pd.to_datetime(df['Date'], dayfirst=True)

#st.write(df)

evol_cases = df[['Date', 'Positif', 'Negatif', 'D√©c√©d√©', 'Gu√©ri']].groupby("Date").sum().cumsum()

st.subheader("En bref")

total_positif = evol_cases.tail(1)['Positif'][0]
total_negatif = evol_cases.tail(1)['Negatif'][0]
total_decede = evol_cases.tail(1)['D√©c√©d√©'][0]
total_geuri = evol_cases.tail(1)['Gu√©ri'][0]

st.markdown("Nombre de malades: <span style='font-size:1.5em;'>%s</span>"%(total_positif - total_geuri), unsafe_allow_html=True)
st.markdown("Nombre de d√©c√®s: <span style='font-size:1.5em;'>%s</span>"%(total_decede), unsafe_allow_html=True)
st.markdown("Nombre de gu√©risons: <span style='font-size:1.5em;'>%s</span>"%(total_geuri), unsafe_allow_html=True)
st.markdown("Pourcentage de guerison: <span style='font-size:1.5em;'>%s</span>"%(np.round(total_geuri / total_positif * 100, 1)), unsafe_allow_html=True)
st.markdown("Taux de croissance journalier liss√© sur les 2 derniers jours: <span style='font-size:1.5em;'>%s</span>"%(np.round(pd.DataFrame(np.sqrt(evol_cases['Positif'].pct_change(periods=2)+1)-1).tail(1)['Positif'][0] * 100, 2)), unsafe_allow_html=True)
st.markdown("Nombre total de cas positifs: <span style='font-size:1.5em;'>%s</span>"%(total_positif), unsafe_allow_html=True)
st.markdown("Nombre de tests negatifs: <span style='font-size:1.5em;'>%s</span>"%(total_negatif), unsafe_allow_html=True)
st.markdown("Nombre de tests r√©alis√©s: <span style='font-size:1.5em;'>%s</span>"%(total_positif + total_negatif), unsafe_allow_html=True)
st.markdown("Pourcentage de tests positifs: <span style='font-size:1.5em;'>%s</span>"%(np.round(total_positif / (total_positif + total_negatif) * 100, 1)), unsafe_allow_html=True)


# II. Map
st.markdown("---")
st.subheader("Carte des cas positifs")
shapefile = 'app/ne_110m_admin_0_countries.shp'

#Read shapefile using Geopandas
gdf = gpd.read_file(shapefile)[['ADMIN', 'ADM0_A3', 'geometry']]
gdf.columns = ['country', 'country_code', 'geometry']
gdf = gdf[gdf['country']=="Senegal"]
grid_crs=gdf.crs
gdf_json = json.loads(gdf.to_json())
grid = json.dumps(gdf_json)

cities = pd.read_csv("city_coordinates.csv", index_col=0)

def find_lat(x):
    try:
        return float(cities[cities['Ville'] == x]['Latitude'])
    except TypeError:
        return None

def find_long(x):
    try:
        return float(cities[cities['Ville'] == x]['Longitude'])
    except TypeError:
        return None

summary = df[['Positif', 'Ville']].groupby("Ville").sum().reset_index()
summary['latitude'] = summary['Ville'].apply(lambda x: find_lat(x))
summary['longitude'] = summary['Ville'].apply(lambda x: find_long(x))

geosource = GeoJSONDataSource(geojson = grid)
pointsource = ColumnDataSource(summary)

hover = HoverTool(
    tooltips = [('Ville', '@Ville'), ('Nombre de cas positifs (au moins)', '@Positif')]
)

#Create figure object.
p = figure(plot_height = 550 , plot_width = 700, tools=[hover, 'pan', 'wheel_zoom'])
p.xgrid.grid_line_color = None
p.ygrid.grid_line_color = None
p.xaxis.visible = False
p.yaxis.visible = False
p.outline_line_color = None

patch = p.patches('xs','ys', source = geosource, fill_color = '#fff7bc',
          line_color = 'black', line_width = 0.35, fill_alpha = 1, 
                hover_fill_color="#fec44f")

#Add patch renderer to figure. 
patch = p.patches('xs','ys', source = geosource, fill_color = 'lightgrey',
          line_color = 'black', line_width = 0.25, fill_alpha = 1)

p.circle('longitude','latitude',source=pointsource, size=15)

st.bokeh_chart(p)

# III. Map
st.markdown("---")
st.subheader("Evolution du nombre de cas positifs au S√©n√©gal")

highlight = alt.selection(type='single', on='mouseover',
                          fields=['Positif'], nearest=True)

chart = alt.Chart(evol_cases.reset_index()).mark_line(point=True, strokeWidth=5).encode(
    x='Date:T',
    y='Positif:Q',
    tooltip='Positif:Q'
).add_selection(
    highlight
).properties(height=400, width=700)


st.write(chart.interactive())

st.markdown("---")
st.subheader("Comparaison avec les Pays-Bas")

st.write("Le S√©n√©gal a une taille de population similaire aux Pays-Bas (¬±16 millions), et une comparaison peut rapidement √™tre dress√©e. Bien que la progression semble plus lente pour le moment au S√©n√©gal, les projections peuvent servir de base de reflexion. La situation au S√©n√©gal est similaire √† celle il y a 15 jours aux Pays-Bas, mais il aura fallu 7 jours aux Pays-Bas contre 18 au S√©n√©gal pour y arriver. Les chiffres des Pays-Bas sont automatiquement extraits de cet article Wikipedia: https://en.wikipedia.org/wiki/2020_coronavirus_pandemic_in_the_Netherlands")

df_nl = pd.read_csv("df_nl.csv")

plt.figure(figsize=(16,10))
plt.plot(df_nl['Netherlands'], linestyle="--", linewidth=5, label="Pays-Bas")
plt.plot(df_nl['Senegal'],label="S√©n√©gal", linewidth=5)
plt.figtext(.5,.9,'Evolution des cas au S√©n√©gal et aux Pays-Bas', fontsize=30, ha='center')
plt.legend()
st.pyplot(plt)

# IV. Contamination
st.markdown("---")
st.subheader("Contamination")

st.write("Nous distinguon les cas import√©s (voyageurs en provenance de l'ext√©rieur) des cas contact qui ont √©t√© en contact avec une personne malade. Les cas Communaut√© sont des cas dont les contacts directs ne peuvent √™tre √©tablis, et donc les plus dangereux.")

facteur = df[['Date', 'Facteur']].dropna()
facteur['Count'] = 1

importe = facteur[facteur['Facteur'] == "Import√©"].groupby("Date").sum().cumsum().reset_index()
voyage = facteur[facteur['Facteur'] == "Contact"].groupby("Date").sum().cumsum().reset_index()
communaute = facteur[facteur['Facteur'] == "Communaut√©"].groupby("Date").sum().cumsum().reset_index()

df_int = pd.merge(importe, voyage, left_on='Date', right_on='Date', how='outer')
df_int = pd.merge(df_int, communaute, left_on='Date', right_on='Date', how='outer')

df_int['Date'] = pd.to_datetime(df_int['Date'], dayfirst=True)
df_int = df_int.sort_values("Date").ffill().fillna(0)
df_int.columns = ["Date", "Importes", "Contact", "Communaut√©"]

ch0 = alt.Chart(df_int).transform_fold(
    ['Importes', 'Contact', 'Communaut√©'],
).mark_line(size=5).encode(
    x='Date:T',
    y='value:Q',
    color='key:N'
).properties(height=500, width=700)

st.altair_chart(ch0)

st.write("Les cas import√©s, ayant ensuite cr√©e des cas contact, proviennent des pays suivants:")

ch3 = alt.Chart(df.dropna(subset=['Source/Voyage'])).mark_bar().encode(
	x = 'Source/Voyage:N',
    y=alt.Y('count()', title='Nombre de patients')
).properties(title="Provenance des malades", height=300, width=700)

st.write(ch3)

# Interactive Map
st.write("Visualisation interactive de la provenance des cas de COVID-19:")

df3 = px.data.gapminder().query("year == 2007")
df2 = df3[(df3['country']=="Italy") | (df3['country']=="Senegal") | (df3['country']=="United Kingdom") | (df3['country']=="France") | (df3['country']=="Spain")]

fig = px.line_geo(df2, locations="iso_alpha",
                  projection="orthographic")

st.plotly_chart(fig)

# V. Population
st.markdown("---")
st.subheader("Population touch√©e")
st.write("Les chiffres pr√©sent√©s ci-dessous tiennent compte des publication du Minist√®re de la Sant√© et de l'Action Sociale. Certaines donn√©es sont manquantes, et nous n'affichons que les valeurs connues √† ce jour.")

st.write("1. L'age moyen des patients est de ", np.mean(df['Age'].dropna()), " ans")

ch = alt.Chart(df).mark_bar().encode(
	x = 'Age:Q',
    y=alt.Y('count()', title='Nombre de patients')
).properties(title="Age des patients", height=300, width=700)

st.write(ch)

st.write("2. La plupart des patients connus sont des hommes")

st.write(pd.DataFrame(df[['Homme', 'Femme']].dropna().sum()).transpose())

st.write("3. La plupart des cas sont concentr√©s √† Dakar")

ch2 = alt.Chart(df.dropna(subset=['Ville'])).mark_bar().encode(
	x = 'Ville:N',
    y=alt.Y('count()', title='Nombre de patients')
).properties(title="Ville connue du patient", height=300, width=700)

st.write(ch2)

st.write("4. La plupart des personnes malades r√©sident au S√©n√©gal")

st.write(df['Resident Senegal'].dropna().value_counts())

st.write("5. La plupart des personnes malades r√©sident au S√©n√©gal")

st.write(df['Resident Senegal'].dropna().value_counts())

st.write("6. Le temps d'hospitalisation moyen pour le moment est de : ", np.mean(df['Temps Hospitalisation (j)'].dropna()), " jours")
